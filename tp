//GENERALIDADES
using System; 

class Ejercicios { 
    


static void Main() { 
Console.WriteLine(Suma(1, 2)); 
Console.WriteLine(RetornarCuatroPrimerasLetras("Telefono")); 
Console.WriteLine(ObtenerFechaActual()); 
} 

// 1 - Crear una función que devuelva la suma de dos números recibidos por parámetros 
static int Suma(int a, int b) { 
return a + b; 
} 

// 2 - Crear una función que reciba una cadena de 8 caracteres y retorne en el mismo parámetro la cadena cortada de izquierda a derecha en 4 caracteres.  
static string RetornarCuatroPrimerasLetras(string origen) { 
return origen.Substring(0, 4); 
} 

// 3 - Crear una función que devuelva la fecha y hora actual  
static DateTime ObtenerFechaActual() { 
DateTime now = DateTime.Now; 
return now; 
} 

// 4)Escribir un comentario con 

 /* 5)Escribir un comentario con /**/ */


//ENUMERACIONES
//1- Crear una enumeración con los días de la semana, comenzando por Domingo con valor 1. 

enum Semana 

{  

Domingo = 1, 
Lunes = 2, 
Martes = 3, 
Miercoles = 4, 
Jueves = 5, 
Viernes = 6, 
Sabado = 7 

} 

//2)- Agregar a la enumeración la posibilidad de Imprimir un Texto por cada día de la semana 

 
using System; 

class EjercicioSemana 
{ 
enum Semana 
{  
Domingo = 1, 
Lunes = 2, 
Martes = 3, 
Miercoles = 4, 
Jueves = 5, 
Viernes = 6, 
Sabado = 7 
} 

 

static void Main(){ 
MostrarValores(); 
} 

static void MostrarValores() 
{ 
foreach(string i in Enum.GetNames(typeof(Semana))) 
Console.WriteLine(i); 
} 

} 

//CONVERSIONES
/*1 -  Realizar la conversión de true, false, 1 y 0 utilizando los métodos Convert., 
bool.Parse y bool.TryParse. Explique cómo responde en cada caso cada uno de los métodos indicados. */

int numeroEntero = 1; 
Boolean valorTrue = System.Convert.ToBoolean(numeroEntero);  
int numeroEntero = 0;  
Boolean valorFalse = System.Convert.ToBoolean(numeroEntero); 


/* Explique que sucede en los siguientes intentos de casteos de datos. 

a) int a = (int)344.4; 
Se guardan solos los valores enteros, se pierden los decimales, en este caso el valor de `a` es `344`. 

b) decimal a = 10; 
Devuelve 10. 

c) int a=443444; 
   short b = (short)a; 
Al tratarse de un numero que excede al declarado por el tipo, se guarda el numero maximo procesado
en la variable `b`, en este caso ` -15308` 
 */



/* 3- Escriba una sentencia switch utilizando una enumeración con 3 colores (blanco, azul y negro) 
y para cada caso indicar un mensaje de cual es el color informado. */

 

public string selectColor(ColorName pickedColor) {  
string colorName= "";  
switch(pickedColor) { 
case colorName.WHITE: 
colorName= "Blanco"; 
break; 
case colorName.BLACK: 
colorName= "Negro"; 
break;  
case colorName.BLUE:  
colorName= "Azul"; 
break;  
default:  
colorName= "Error";  
break; 

}  
Console.WriteLine("El color es: " + colorName); 
} 


/* 4- Si se tiene una variable entera a, realice una sentencia if para evaluar si la variable 
a es mayor a 10. Si es verdad, mostrar un mensaje indicando que el valor es mayor a 10. */
public string esMayorADiez(int A) {  
if(A > 10) {  
Console.WriteLine("Es mayor a diez");  
}  
} 

 
/*5- Al ejercicio del punto 4), agregar la sentencia de else y, en ella, indicar un mensaje de error.*/ 
public string esMayorADiez(int A) { 
if(A > 10) { 
Console.WriteLine("Es mayor a diez"); 
}else { 
Console.WriteLine("Es menor a diez"); 
} 
} 

/* 6- ¿Cuál es la diferencia entre la sentencia for y foreach? ¿Cuándo se debe utilizar cada una de ellas? 
La principal diferencia entre `for` y `foreach` es que, la sentencia `for` itera tomando como
parametro una condición, tomando como condición de ejecución, que la misma sea verdadera. 
En contraste, `foreach` está pensado como azúcar sintactico, en donde su escenario se basa en iterar 
colecciones, con su ejecución atada a los elementos de dicha colección. */

 
using System; 
using System.Collections; 
using System.Collections.Generic; 

class Ejemplo  { 
static void Main() { 
EjemploIteraciones(); 
} 


static void EjemploIteraciones() { 
List<string> nombres = new List<string>(); 
nombres.Add("jose"); 
nombres.Add("martin"); 
nombres.Add("pepe"); 

 

foreach(string nombre in nombres) { 
Console.WriteLine(nombre); 
} 

for(int i = 0; i < nombres.Count; i++) { 
Console.WriteLine(nombres[i]); 
} 
} 
} 

/* 7- Defina una variable a que en cada ciclo de una sentencia while incremente su valor en 5.
 Cuando la variable a exceda el valor de 50, el ciclo while debe finalizar. */
public int incrementaEnCinco() { 

int A = 0; 
while(A < 50){ 
A = A + 5; 
} 

return A; 
} 


//fin tp
